QUERIES

1) How many vaccines per Person?

	db.covid_certificates.aggregate({
		$project: {
			NAME: 1,
			NumberOfVaccines: {$cond: {if: {$isArray: "$VACCINATIONS"}, then: {$size: "$VACCINATIONS"}, else: 0}}
		}
	})

2) How many tests per Person?

	db.covid_certificates.aggregate({
		$project: {
			NAME: 1,
			NumberOfTests: {$cond: {if: {$isArray: "$TESTS"}, then: {$size: "$TESTS"}, else: 0}}
		}
	})



3) Who are the positive persons?

 db.covid_certificates.aggregate([
        {$project: {NAME: 1,lastTest: {$arrayElemAt: ["$TESTS", 0]}}},
        {$match: {"lastTest.RESULT": "positive"}}
    ])



5) Top 5 person with at least a test sorted by the number of positive tests

	db.covid_certificates.aggregate([
	  {$match: {TESTS: {$exists: true}}},
	  {
        $project: {NAME: 1,NumberOfTests: {$size: {
            "$filter": {input: "$TESTS",as: "t",cond: {$eq: ["$$t.RESULT", "positive"]}}}}}},
        {"$sort": {"NumberOfTests": -1}},{"$limit": 5}
	])

6) Positivity rate per Vaccine

     db.covid_certificates.aggregate([
          {$match: {VACCINATIONS: {$exists: true}}},
          {$project: {vaccine: {$arrayElemAt: ["$VACCINATIONS", 0]} , test: {$arrayElemAt: ["$TESTS" , 0]}}},
          {$project: {vaccine: "$vaccine" , resultTest: {$cond: {if: {$eq: ["$test.RESULT" , "positive"]}, then: 1, else: 0}}}},
          {$group: {_id: {name: "$vaccine.VACCINE.NAME"} , totalVaccine: {$sum: 1} , totalPositive: {$sum: "$resultTest"}}},
          {$project: {name: "$name" , rate: {$divide: ["$totalPositive" , "$totalVaccine"]}}}
      ])

7) Number of vaccine done by a doctor/nurse
    db.covid_certificates.aggregate([
        {$project: {vaccines: "$VACCINATIONS"}},
        {$unwind: "$vaccines"},
        {$project: {doc: "$vaccines.DOCTOR"}},
        {$group: {_id: {doc: "$doc"}, count: {$sum: 1}}},
        {$sort: {count: -1}},
        {"$limit": 5}
    ])

7) Number of test done by a doctor/nurse
    db.covid_certificates.aggregate([
        {$project: {tests: "$TESTS"}},
        {$unwind: "$tests"},
        {$project: {nurse: "$tests.NURSE"}},
        {$group: {_id: {nurse: "$nurse"}, count: {$sum: 1}}},
        {$sort: {count: -1}},
        {"$limit": 5}
    ])
8) Percentage of vaccinated person over a certain age (for example older than 20yo)

    (BIRTHDATE saved as new Date("1999-03-18"))

    db.covid_certificates.aggregate([
        {$match: {$and: [{BIRTHDATE: {$exists: true}} , {VACCINATIONS: {$exists: true}}]}},
        {$project: {age: {"$divide":[{$subtract: ["$$NOW" ,"$BIRTHDATE"]}, 1000 * 24 * 60 * 60 * 365]}}},
        {$project: {age: "$age" , VacPersonOverAge: {$cond: {if: {age: {$gte: ["$age" , 20]}}, then: 1, else: 0}}}},
        {$group: {_id: null ,totNumOfVaccinatedPerson: {$sum: 1} , numOfVaccinatedPersonOverAge: {$sum: "$VacPersonOverAge"}}},
        {$project: {numOfVaccinatedPersonOverAge: "$numOfVaccinatedPersonOverAge" , totalNumberOfVaccinatedPerson: "$totNumOfVaccinatedPerson" , rate: {$divide: ["$numOfVaccinatedPersonOverAge" , "$totNumOfVaccinatedPerson"]}}}
    ])

9) The most popular test

    db.covid_certificates.aggregate([
        {$project: {tests: "$TESTS"}},
        {$unwind: "$tests"},
        {$project: {type: "$tests.TYPE"}},
        {$group: {_id: {type: "$type"}, count: {$sum: 1}}},
        {$sort: {count: -1}}
    ])

10) The most popular vaccine

    db.covid_certificates.aggregate([
        {$project: {vaccine: "$VACCINATIONS"}},
        {$unwind: "$vaccine"},
        {$project: {type: "$vaccine.VACCINE.NAME"}},
        {$group: {_id: {type: "$type"}, count: {$sum: 1}}},
        {$sort: {count: -1}}
    ])

11) Find all the person vaccinated with a given lot of vaccine

    db.covid_certificates.find({
        "VACCINATIONS.VACCINE.BATCH": 13521 ,
        "VACCINATIONS.VACCINE.NAME": "COVID-19 Vaccine Moderna"
    })

12) Find the last test of a person

    db.covid_certificates.find({},
        {name: "$NAME",lastTest: {$cond: {if: {$isArray: "$TESTS"}, then: {$arrayElemAt: ["$TESTS" , 0]}, else: "None"}}}
    )

13) Find all the emergency contact of positive persons (this one could be added in the project of 3)
    db.covid_certificates.aggregate([
        {
            $project: {
              NAME: 1,
              EMERGENCY_CONTACT: 1,
              result: {$arrayElemAt: ["$TESTS", -1]}
            }
        },
        {
        $match: {"result.RESULT": "positive"}
        },
        {$project: {
          NAME: 1,
          EMERGENCY_CONTACT: 1}}
    ])
14) Percentage of persons with 2 doses of vaccine but green pass not valid (due to a positive test)
    db.covid_certificates.aggregate([
        {$match:{VACCINATIONS : {$exists:true}}},
        {$project: {GREEN_PASS:"$GREEN_PASS",size:{$size:"$VACCINATIONS"}}},
        {$match:{ size:{$gte:2}}},
        {$project: {notValid:{ $cond: [ {$ifNull: ['$GREEN_PASS', false]},1, 0 ]}}},
        { $group:{"_id":null,Vaccinated:{$sum:1},invalidated:{$sum:"$notValid"}}},
        {$project: {rate: {$divide: ["$invalidated" , "$Vaccinated"]}}}
    ])

15) Find the no-vax king: the person with the largest number of tests and no vaccine

    db.covid_certificates.aggregate([
        {$match: {$and: [{VACCINATIONS: {$exists: false}} , {TESTS: {$exists: true}}]}},
        {$addFields: {numberOfTests: {$size: "$TESTS"}}},
        {$sort: {numberOfTest: -1}} , {$limit: 1}
    ])

16) Find all the issuers in Milan's province

    db.issuers.find({"LOCATION_DETAILS.PROVINCE":"MI"})


18) Number of non vaccinated person

    db.covid_certificates.aggregate([
        {$match: {VACCINATIONS: {$exists: false}}},
        {$count: "NumberOfNonVaccinatedPersons"}
    ])
19) The youngest with the green pass

    db.covid_certificates.aggregate([
        {$match:{GREEN_PASS: {$exists: true}}},
        {"$sort": {BIRTHDATE: -1}},{"$limit": 5}
    ])

20) Person with green pass that will expire in the next month

     db.covid_certificates.aggregate([
        {$match:{GREEN_PASS: {$exists: true}}},
        {$match: {"GREEN_PASS.EXPIRATION_DATE":{$gte: new Date(new Date().getTime()+(30*60*60*1000)) }}}
    ])

21) Average age of positive persons

     db.covid_certificates.aggregate([
        {$match: {$and: [{BIRTHDATE: {$exists: true}} , {TESTS: {$exists: true}}]}},
        {$addFields: {result: {$arrayElemAt: ["$TESTS", 0]}}},
        {$match: {"result.RESULT": "positive"}},
        {$addFields: {age: {"$divide":[{$subtract: [new Date() ,"$BIRTHDATE"]}, 1000 * 24 * 60 * 60 * 365]}}},
        {$group: {_id: null , Average_age: {$avg: "$age"}}},
        {$project: {Average_age: "$Average_age" , _id: 0}}
    ])

22) Find the five issuers that did most vaccines
   db.covid_certificates.aggregate([
        {$project: {vaccines: "$VACCINATIONS"}},
        {$unwind: "$vaccines"},
        {$project: {issuer: "$vaccines.ISSUER"}},
        {$group: {_id: {issuer: "$issuer"}, count: {$sum: 1}}},
        {$sort: {count: -1}},
        {"$limit": 5},
      {$lookup: {
           from: "issuers",

            localField: "_id.issuer",
         foreignField: "_id",
           as: "issuer"
         }
    }
    ])
COMMANDS

1) Create person's documents
db.covid_certificates.insertOne(
{
    "NAME": "Eudosia",
    "SURNAME": "Di Paola",
    "BIRTHDATE": {
        "$date": "1954-02-07T00:00:00.000Z"
    },
    "FISCAL_CODE": "DPLDSE54B47D072V",
    "BIRTH_PLACE": "Cortiglione",
    "PHONE_NUMBER": "+393052718550",
    "EMAIL": "eudosia.di paola@polipass.it",
    "ADDRESS": "Via Cappellini 20133 Milano MI",
    "EMERGENCY_CONTACT": {
        "NAME": "Ellera",
        "SURNAME": "Longo",
        "PHONE_NUMBER": "3409155160"
    },
    "PASSWORD": "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
    "ROLE": "nurse"
})

2) Insert a new test (update of the array)
            ({'_id': ObjectId("61aa537c384ba2b586a9c044")},
              {'$push': {'VACCINATIONS': {
               '$each': [{
                "VACCINE": {
                    "NAME": "Vaxzevria",
                    "PRODUCER": "AstraZeneca",
                    "TYPE": "viral vector",
                    "BATCH": 5920,
                    "PRODUCTION_DATE": {
                        "$date": "2021-07-28T00:00:00.000Z"
                    }
                },
                "DATE": {
                    "$date": "2021-08-02T19:58:00.000Z"
                },
                "DOSE": 1,
                "ISSUER": {
                "$oid": "61aa537d384ba2b586a9c053"
                },
                "DOCTOR": {
                    "NAME": "Maia",
                    "SURNAME": "Prati",
                    "FISCAL_CODE": "PRTMAI53B49C564W"
                },
                "NURSE": {
                    "NAME": "Eudosia",
                    "SURNAME": "Di Paola",
                    "FISCAL_CODE": "DPLDSE54B47D072V"
                }
               }],
              '$sort': {'DATE': -1}
               }}})
3) Change the result of a test (if the result inserted is wrong)
               db.covid_certificates.updateOne ({'_id': ObjectId("61aa537c384ba2b586a9c044")},
              {'$set': {'TESTS.0.RESULT': "negative"}})
4) Drop all
db.drop_collection('covid_certificates')